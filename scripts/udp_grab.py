""" 
This scrip attempts to read a single frame and plot it.
"""

import time
from cosmic.camera import framegrabber_nozmq, fccd
import sys

kwargs1 = dict(
read_addr= "10.0.5.55:49205", 
send_addr=None, 
udp_addr ="10.0.5.207:49203"
)
kwargs2 = dict(
read_addr= "127.0.0.1:49203", 
send_addr=None, 
udp_addr ="127.0.0.1:49205"
)

#S = camera.framegrabber_nozmq.Framegrabber(49201,None,cin_ip ="10.0.5.207", cin_port = 49203,fsize=2*1152*1940)
S = framegrabber_nozmq.Framegrabber(2*1152*1920, **kwargs1)
S.createReadFrameSocket()

try:
    S.start()
except KeyboardInterrupt:
    S.stop() 
    
while True:
    try:
        time.sleep(.3)
    except KeyboardInterrupt:
        print("Bye")      
        S.stop()
        break
        
from matplotlib import pyplot as plt
import numpy as np
#plt.ion()
fig=plt.figure()
ax = fig.add_subplot(111)
nrows = 960
CCD = fccd.FCCD(nrows=nrows)
CCD2 = fccd.FCCD(nrows=nrows)
#print CCD._nbmux, CCD._height, CCD._width, CCD._q
#CCD = camera.FCCD(width=2000) #, rotate=self.params['rotate'])
#print CCD.rawdata.shape
#frame = np.frombuffer(S.fbuffer, np.uint16)
ref = [50244, 50227, 50210, 50193, 49988, 49971, 49954, 49937, 49732, 49715, 49698, 49681, 49476, 49459, 49442, 49425, 46148, 46131, 46114, 46097, 45892, 45875, 45858, 45841, 45636, 45619, 45602, 45585, 45380, 45363, 45346, 45329, 42052, 42035, 42018, 42001, 41796, 41779, 41762, 41745, 41540, 41523, 41506, 41489, 41284, 41267, 41250, 41233, 37956, 37939, 37922, 37905, 37700, 37683, 37666, 37649, 37444, 37427, 37410, 37393, 37188, 37171, 37154, 37137, 33860, 33843, 33826, 33809, 33604, 33587, 33570, 33553, 33348, 33331, 33314, 33297, 33092, 33075, 33058, 33041, 29764, 29747, 29730, 29713, 29508, 29491, 29474, 29457, 29252, 29235, 29218, 29201, 28996, 28979, 28962, 28945, 25668, 25651, 25634, 25617, 25412, 25395, 25378, 25361, 25156, 25139, 25122, 25105, 24900, 24883, 24866, 24849, 21572, 21555, 21538, 21521, 21316, 21299, 21282, 21265, 21060, 21043, 21026, 21009, 20804, 20787, 20770, 20753, 17476, 17459, 17442, 17425, 17220, 17203, 17186, 17169, 16964, 16947, 16930, 16913, 16708, 16691, 16674, 16657, 13380, 13363, 13346, 13329, 13124, 13107, 13090, 13073, 12868, 12851, 12834, 12817, 12612, 12595, 12578, 12561, 9284, 9267, 9250, 9233, 9028, 9011, 8994, 8977, 8772, 8755, 8738, 8721, 8516, 8499, 8482, 8465, 5188, 5171, 5154, 5137, 4932, 4915, 4898, 4881, 4676, 4659, 4642, 4625, 4420, 4403, 4386, 4369]

#cdes = np.array([4420, 8516, 12612, 16708, 20804, 24900, 28996, 33092, 37188, 41284, 45380, 49476, 4403, 8499, 12595, 16691, 20787, 24883, 28979, 33075, 37171, 41267, 45363, 49459, 4386, 8482, 12578, 16674, 20770, 24866, 28962, 33058, 37154, 41250, 45346, 49442, 4369, 8465, 12561, 16657, 20753, 24849, 28945, 33041, 37137, 41233, 45329, 49425, 4676, 8772, 12868, 16964, 21060, 25156, 29252, 33348, 37444, 41540, 45636, 49732, 4659, 8755, 12851, 16947, 21043, 25139, 29235, 33331, 37427, 41523, 45619, 49715, 4642, 8738, 12834, 16930, 21026, 25122, 29218, 33314, 37410, 41506, 45602, 49698, 4625, 8721, 12817, 16913, 21009, 25105, 29201, 33297, 37393, 41489, 45585, 49681, 4932, 9028, 13124, 17220, 21316, 25412, 29508, 33604, 37700, 41796, 45892, 49988, 4915, 9011, 13107, 17203, 21299, 25395, 29491, 33587, 37683, 41779, 45875, 49971, 4898, 8994, 13090, 17186, 21282, 25378, 29474, 33570, 37666, 41762, 45858, 49954, 4881, 8977, 13073, 17169, 21265, 25361, 29457, 33553, 37649, 41745, 45841, 49937, 5188, 9284, 13380, 17476, 21572, 25668, 29764, 33860, 37956, 42052, 46148, 50244, 5171, 9267, 13363, 17459, 21555, 25651, 29747, 33843, 37939, 42035, 46131, 50227, 5154, 9250, 13346, 17442, 21538, 25634, 29730, 33826, 37922, 42018, 46114, 50210, 5137, 9233, 13329, 17425, 21521, 25617, 29713, 33809, 37905, 42001, 46097, 50193])

frame = np.frombuffer(S.circbuffer.pop()[1], '<u2')
#descrambled = CCD2.descramble(CCD.descramble(frame).flatten())
descrambled=frame.reshape((frame.size/192,192))
v=np.array([descrambled[1][CCD._iq[i]] for i in range(192)])
#print np.allclose(ref,v)
#new=np.array([ref.index(d) for d in descrambled[1]])
#print new

#ax.imshow(CCD.assemble2(CCD.descramble(frame)))
ax.imshow(descrambled[:384,:])
#ax.imshow(CCD.assemble2(frame.reshape((12,nrows,192))))
#ax.imshow(CCD.assemble2(frame))
#ax.imshow(np.frombuffer(S.fbuffer,np.uint16,1152*2000).reshape((2000,1152)))
#S.join()
time.sleep(.3)
plt.show()
